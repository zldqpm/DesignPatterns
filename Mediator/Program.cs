using System.Reflection;

namespace Mediator
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("中介者模式!");
            //中介者模式是一种行为设计模式，它通过引入一个中介者对象，来解耦多个对象之间的交互。中介者模式使得各个对象之间不需要直接相互通信，而是通过中介者来进行消息传递和协调。
            //中介者模式的主要参与者包括以下几个角色：
            //1.中介者（Mediator）：定义了对象之间交互的接口，通常包括一个或多个消息传递方法。
            //2.具体中介者（ConcreteMediator）：实现中介者接口，负责协调各个对象之间的交互关系。
            //3.同事对象（Colleague）：定义了与其他同事对象交互的接口。
            //4.具体同事对象（ConcreteColleague）：实现同事对象接口，负责与其他同事对象进行通信。

            //            中介者模式在以下场景中非常有用：

            //1.多个对象之间存在复杂的相互关系，需要通过一个中介者来协调它们之间的交互。
            //2.对象之间的交互行为需要解耦，避免直接依赖和紧耦合。
            //3.当新增 / 删除一个对象时，希望不需要修改其他对象的代码。

            //以下是一些中介者模式的应用场景举例：
            //1.聊天室系统：在一个聊天室中，多个用户之间需要进行消息的发送和接收。使用中介者模式，可以将用户之间的通信交由聊天室中介者来处理，避免用户直接相互发送消息，提高系统的灵活性和可扩展性。
            //2.航空控制系统：在航空控制系统中，多个飞机和地面控制中心之间需要进行通信和协调。使用中介者模式，可以引入一个控制中心作为中介者，来处理飞机之间的通信，避免直接飞机之间的相互通信，提高系统的可控性和安全性。
            //3.MVC框架：在MVC（Model - View - Controller）框架中，中介者模式被广泛应用。控制器（Controller）作为中介者，协调模型（Model）和视图（View）之间的交互，实现数据的传递和更新。
            //4.订单处理系统：在一个订单处理系统中，涉及到多个对象之间的交互，如订单、库存、支付、物流等。使用中介者模式，可以引入一个订单处理中介者，负责协调这些对象之间的交互，统一处理订单相关的业务逻辑。
            //总之，中介者模式适用于多个对象之间需要进行复杂交互、需要解耦和灵活性的场景。通过引入中介者来统一协调对象之间的交互，可以降低系统的耦合度，提高可维护性和可扩展性。

            //以下是一个简单的示例，展示了如何使用中介者模式实现订单处理系统：
            // 创建中介者
            OrderMediator mediator = new OrderMediator();

            // 创建订单
            Order onlineOrder = new OnlineOrder(mediator) { OrderId = 1 };
            Order phoneOrder = new PhoneOrder(mediator) { OrderId = 2 };

            // 处理订单
            onlineOrder.Process();
            phoneOrder.Process();

            Console.ReadLine();
            //在上述示例中，我们创建了一个订单处理系统。其中，`IMediator` 是抽象中介者接口，`OrderMediator` 是具体中介者实现。`Order` 是抽象同事类，`OnlineOrder` 和 `PhoneOrder` 是具体同事类。
            //在订单的处理过程中，具体同事类通过中介者来发送通知。中介者负责接收通知，并根据具体订单的处理结果进行相应的处理。
            //运行上述代码，我们可以看到订单的处理结果和相应的通知信息被打印出来。
            //这个示例展示了如何使用中介者模式实现订单处理系统。中介者模式将订单对象的处理过程和通知逻辑解耦，使得订单对象可以专注于自身的业务逻辑，而通知的发送和处理交由中介者来处理，提高了系统的灵活性和可扩展性。

        }
    }
}