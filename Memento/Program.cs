namespace Memento
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("备忘录模式!");
            //备忘录模式（Memento Pattern）是一种行为型设计模式，它允许在不破坏封装性的前提下捕获和恢复对象的内部状态。

            //该模式包含以下几个角色：
            //-Originator（发起人）：负责创建一个备忘录，并记录、恢复自身的内部状态。
            //-Memento（备忘录）：存储Originator的内部状态，并可以防止除Originator以外的其他对象访问备忘录。
            //-Caretaker（管理者）：负责保存和恢复备忘录，但不能修改备忘录的内容。

            //备忘录模式的使用场景包括：
            //1.需要保存和恢复对象状态的场景。
            //2.需要实现撤销和重做操作的场景。
            //3.需要提供对象状态的快照功能的场景。

            //备忘录模式的使用场景包括：
            //1.需要保存和恢复对象状态的场景：当需要保存对象的状态，以便在需要时能够恢复到之前的状态时，可以使用备忘录模式。例如，文本编辑器可以使用备忘录模式来保存用户输入的文本，并在需要时恢复到之前的编辑状态。
            //2.需要实现撤销和重做操作的场景：备忘录模式可以用于实现撤销和重做功能。通过将对象状态保存在备忘录中，用户可以撤销操作并恢复到之前的状态，也可以重做操作以返回到之后的状态。
            //3.需要提供对象状态的快照功能的场景：有些情况下，需要在某个时间点对对象的状态进行快照，以便在需要时进行回溯或比较。备忘录模式可以用于实现这样的功能。例如，在游戏开发中，可以使用备忘录模式来记录游戏的关卡状态，以便在需要时可以恢复到之前的关卡状态。
            //总的来说，备忘录模式适用于那些需要保存、恢复或追踪对象状态的场景。它提供了一种封装对象状态并提供对状态的访问和恢复的方式，使得对象的状态管理更加灵活和可控。
            //请注意，以上场景只是备忘录模式的一些常见应用场景，实际上，备忘录模式可以根据具体的需求和情境进行灵活的应用。


            //下面是一个示例代码，演示如何使用备忘录模式保存和恢复对象状态：
            Originator originator = new Originator();
            Caretaker caretaker = new Caretaker();

            // 设置发起人的状态
            originator.State = "State 1";

            // 创建备忘录并保存到管理者中
            caretaker.Memento = originator.CreateMemento();

            // 修改发起人的状态
            originator.State = "State 2";

            // 恢复发起人的状态
            originator.RestoreMemento(caretaker.Memento);

            Console.WriteLine(originator.State);  // 输出：State 1
            //在上述示例中，`Originator` 是发起人角色，负责创建备忘录和恢复自身状态。`Memento` 是备忘录角色，用于存储 `Originator` 的内部状态。`Caretaker` 是管理者角色，负责保存和恢复备忘录。
            //通过设置发起人的状态、创建备忘录、修改状态和恢复备忘录，我们可以实现对发起人状态的保存和恢复功能。在示例中，我们首先将发起人的状态设置为 "State 1"，然后创建了一个备忘录并保存到 `Caretaker` 中。接着，我们修改了发起人的状态为 "State 2"，但最后又恢复了备忘录，使得发起人的状态恢复到先前的状态 "State 1"。
            //通过备忘录模式，我们可以在需要时保存对象的内部状态，并在需要时恢复到先前的状态，而无需暴露对象的实现细节。这样可以有效地保护对象的封装性，同时提供灵活性和可维护性。
            //通过备忘录模式，我们可以在不破坏对象封装的前提下，使用备忘录模式可以实现对对象状态的保存和恢复。
            //具体实现时，需要在发起人类中定义一个内部的备忘录类，该备忘录类可以保存发起人对象的状态。然后，发起人类提供创建备忘录和恢复备忘录的方法，供其他类使用。
        }
    }
}