namespace Flyweight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("享元模式!");
            //享元模式（Flyweight Pattern）是一种结构型设计模式，它旨在通过共享对象来有效地支持大量细粒度的对象。享元模式通过共享相同的状态，减少了内存使用和对象创建的开销，提高了系统的性能和效率。
            //享元模式的核心思想是将对象分为可共享的内部状态（Intrinsic State）和不可共享的外部状态（Extrinsic State）。内部状态是对象共享的部分，存储在享元对象内部，并且不随外部环境的变化而变化。外部状态是对象的变化部分，由客户端在使用时传入。
            //使用享元模式时，我们将需要创建的对象分为两类：
            //1.内部状态可共享的对象：这些对象的内部状态是固定的，可以在多个上下文中共享。它们被存储在一个享元池（Flyweight Pool）中，以便被重复使用。
            //2.外部状态不可共享的对象：这些对象的外部状态是变化的，需要由客户端在使用时传入。每次使用时都会创建新的对象。


            //享元模式适用于以下情况：
            //1.当需要创建大量相似对象，并且这些对象可以共享一部分或全部内部状态时，可以使用享元模式来减少对象的数量和内存开销。
            //2.当对象的外部状态相对较多，并且外部状态可以从对象中剥离出来时，可以使用享元模式来共享内部状态，避免重复创建相同的对象。
            //3.当需要对对象进行缓存，以提高系统性能和响应速度时，可以使用享元模式来缓存共享对象，避免重复计算或获取资源。

            //下面是一个应用享元模式的例子：图形编辑器中的图形对象。
            //在一个图形编辑器中，可能有大量的图形对象，如圆形、矩形、三角形等。这些图形对象具有相同的绘制方法，但每个图形对象的位置和颜色可能不同。
            //使用享元模式，可以将图形对象中的绘制方法和共享的属性（如颜色）提取出来作为内部状态，而将每个图形对象的位置作为外部状态。这样，可以共享相同颜色的图形对象，减少内存开销。
            ShapeFactory shapeFactory = new ShapeFactory();
            IShape redCircle = shapeFactory.GetCircle("Red");
            redCircle.Draw(10, 20);
            IShape blueCircle = shapeFactory.GetCircle("Blue");
            blueCircle.Draw(30, 40);
            IShape redCircle2 = shapeFactory.GetCircle("Red");
            redCircle2.Draw(50, 60);
            //在上述示例中，我们使用享元模式来创建图形对象。具体享元类 Circle 表示圆形，它包含一个内部状态 color 用于表示颜色。图形工厂 ShapeFactory 用于创建并管理图形对象，通过共享相同颜色的圆形对象来减少对象的数量和内存开销。
            //客户端代码中，我们使用图形工厂获取圆形对象，并调用 Draw 方法传入位置参数。可以看到，当获取相同颜色的圆形对象时，实际上是从享元池中取出已存在的对象，避免了重复创建相同的对象。
            //通过使用享元模式，我们可以有效地管理和共享大量相似对象，减少内存开销，并提高系统性能。在图形编辑器中，当需要频繁创建和绘制图形对象时，享元模式可以帮助我们提升编辑器的性能和响应速度
            Console.ReadLine();

        }
    }
}