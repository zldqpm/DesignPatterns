namespace Bridge
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
            //桥接模式（Bridge Pattern）是一种结构型设计模式，它的主要目的是将抽象部分与其实现部分分离，使它们可以独立变化。桥接模式通过将继承关系转化为关联关系，从而减少了类之间的耦合性，提高了系统的灵活性。
            //桥接模式适用于以下场景：
            //1.当你希望抽象部分和实现部分能够独立变化，且需要动态地将它们组合在一起时，可以使用桥接模式。这样可以避免在系统中出现类爆炸的情况。
            //2.当一个类存在多个维度的变化，且每个维度都可以独立变化时，可以使用桥接模式。通过将每个维度抽象为一个继承层次结构，然后使用桥接模式将各个维度的变化进行组合，使得每个维度可以独立扩展和变化。
            //3.当希望在运行时动态地切换或扩展抽象部分和实现部分的关系时，可以使用桥接模式。桥接模式允许在运行时选择不同的实现部分，从而实现动态的切换或扩展。
            //4.当存在多个不同的实现方式，且需要将它们解耦时，可以使用桥接模式。桥接模式通过将抽象和实现分离，使得它们可以独立进行变化，同时降低了它们之间的耦合性。
            //以下是一些应用桥接模式的实际场景举例：
            //1.图形界面库：在图形界面库中，可以使用桥接模式将图形元素与不同的渲染引擎进行桥接。抽象部分是图形元素，实现部分是具体的渲染引擎。通过桥接模式，可以在运行时选择不同的渲染引擎，而不需要修改图形元素的代码。
            //2.操作系统和文件系统的适配：不同操作系统上的文件系统具有不同的实现方式，可以使用桥接模式将操作系统与文件系统进行适配。抽象部分可以是操作系统接口，实现部分可以是具体的文件系统实现，通过桥接模式可以将操作系统与文件系统解耦，使得可以在不同操作系统上使用不同的文件系统实现。
            //3.消息通知系统：在一个消息通知系统中，可以使用桥接模式来处理不同的消息发送方式。抽象部分可以是消息发送的接口，实现部分可以是不同的消息发送通道，如邮件、短信、推送通知等。通过桥接模式，可以将消息发送方式与具体的发送通道解耦，使得可以灵活地添加新的发送通道，同时保持发送接口的稳定性。
            //4.电视机遥控器：在一个电视机遥控器系统中，可以使用桥接模式来处理不同品牌的电视机和不同功能的遥

            // 创建邮件发送实例
            IMessageSender emailSender = new EmailSender();
            // 创建消息通知实例，并使用邮件发送实例
            MessageNotifier notifier = new MessageNotifier(emailSender);
            // 发送消息通知
            notifier.SendNotification("这是一条通过邮件发送的消息");
            // 创建短信发送实例
            IMessageSender smsSender = new SmsSender();
            // 更新消息通知实例，使用短信发送实例
            notifier = new MessageNotifier(smsSender);
            // 发送消息通知
            notifier.SendNotification("这是一条通过短信发送的消息");
            Console.ReadLine();
            //在这个示例中，我们定义了一个抽象的消息发送接口 `IMessageSender`，并创建了两个具体的实现类 `EmailSender` 和 `SmsSender`，分别用于通过邮件和短信发送消息。然后，我们定义了一个 `MessageNotifier` 类，该类接收一个 `IMessageSender` 实例，并提供了一个 `SendNotification` 方法来发送消息通知。
            //在客户端代码中，我们首先创建了一个 `EmailSender` 实例，并将其传递给 `MessageNotifier`，然后调用 `SendNotification` 方法发送邮件通知。接下来，我们创建了一个 `SmsSender` 实例，并更新 `MessageNotifier` 的实例，使用短信发送方式发送通知。
            //通过这个示例，我们可以使用控制台来模拟消息通知的功能。你可以根据自己的需要扩展和修改代码，例如添加更多的消息发送方式或改进通知的逻辑。
        }
    }
}