namespace TemplateMethod
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("模板方法!");
            //模板方法模式（Template Method Pattern）是一种行为设计模式，它定义了一个算法的骨架，将算法中的某些步骤延迟到子类中实现。模板方法模式通过抽象类或接口定义算法的结构，具体的实现则交给子类来完成。

            //模板方法模式适用于以下场景：
            //1.当有一组相关的算法，并且这些算法之间存在一定的共同部分和变化部分时，可以使用模板方法模式。将共同部分抽象到父类中作为模板方法，而将变化部分延迟到子类中实现。
            //2.当希望通过固定的算法框架来实现某个算法，并且允许在特定步骤上进行定制化时，可以使用模板方法模式。


            //模板方法模式适用于以下场景：

            //1.当有一组相关的算法，并且这些算法之间存在一定的共同部分和变化部分时，可以使用模板方法模式。将共同部分抽象到父类中作为模板方法，而将变化部分延迟到子类中实现。
            //2.当希望通过固定的算法框架来实现某个算法，并且允许在特定步骤上进行定制化时，可以使用模板方法模式。

            //举例来说，以下是几个适用于模板方法模式的场景：
            //1.煮饭过程：假设我们有多种不同类型的米饭，如白米饭、糯米饭等，它们在洗米、加水、煮饭和上菜的步骤上存在一定的共同部分和变化部分。我们可以使用模板方法模式，将共同的煮饭过程抽象到父类中作为模板方法，而将具体的米饭类型和上菜方式由子类实现。
            //2.数据导入流程：假设我们有多种不同格式的数据文件需要导入到系统中，如CSV文件、Excel文件等，它们在读取文件、解析数据和入库等步骤上存在一定的共同部分和变化部分。我们可以使用模板方法模式，将共同的导入流程抽象到父类中作为模板方法，而将具体的文件格式和入库方式由子类实现。

            //3.游戏角色的战斗行为：假设我们有多种不同类型的游戏角色，如战士、法师等，它们在准备战斗、攻击敌人和回血等行为上存在一定的共同部分和变化部分。我们可以使用模板方法模式，将共同的战斗行为抽象到父类中作为模板方法，而将具体的角色类型和具体行为由子类实现。
            //总之，模板方法模式适用于具有一定算法结构的场景，其中算法中存在共同部分和变化部分，并且允许在特定步骤上进行定制化。通过使用模板方法模式，可以提高代码的复用性、扩展性和可维护性，同时使得算法的整体结构更加清晰和易于理解。

            //下面是一个简单的示例，演示了如何使用模板方法模式实现一个煮饭的过程：
            Console.WriteLine("煮饭的例子");
            CookRice cookWhiteRice = new CookWhiteRice();
            cookWhiteRice.Cook();
            Console.WriteLine();
            CookRice cookStickyRice = new CookStickyRice();
            cookStickyRice.Cook();
            //在上述示例中，CookRice 是煮饭的抽象类，其中定义了一个模板方法 Cook()，该方法定义了煮饭的步骤，包括洗米、加水、煮米饭和上菜。WashRice() 和 Serve() 是抽象方法，由具体子类实现。AddWater() 和 CookRiceInPot() 是具体方法，在抽象类中已经给出了默认实现。
            //通过使用模板方法模式，可以确保算法的结构不变，而将具体的实现细节留给子类来完成。这样可以提高代码的复用性和扩展性，同时也使得算法的整体结构更加清晰和易于理解


            //下面是一个简单的示例代码，演示了如何使用模板方法模式实现数据导入流程
            Console.WriteLine("数据导入的例子");
            // 使用CSV文件导入
            DataImportTemplate csvImport = new CsvDataImport();
            csvImport.ImportData();

            Console.WriteLine();

            // 使用Excel文件导入
            DataImportTemplate excelImport = new ExcelDataImport();
            excelImport.ImportData();
            //在上述代码中，DataImportTemplate 是一个抽象类，定义了数据导入的模板方法 ImportData() 和一些具体方法。其中，ParseData() 和 SaveData() 是抽象方法，需要由具体子类实现。DisplayResult() 是一个钩子方法，可以选择性重写，但默认为空实现。
            //CsvDataImport 和 ExcelDataImport 分别是具体的子类，实现了父类中的抽象方法，完成了特定文件格式的数据导入逻辑。
            //在客户端代码中，通过创建具体子类的实例，调用 ImportData() 方法来执行数据导入流程。可以看到，不同的文件格式对应的具体子类可以有不同的解析数据和保存数据的实现逻辑。而其他共同的流程步骤则在父类中统一定义和实现。
            //这样，我们就通过模板方法模式将数据导入流程的整体结构固定下来，而具体的实现细节则留给子类来完成，以实现不同文件格式的数据导入功能。
            Console.ReadLine();

        }
    }
}