namespace Strategy
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("策略模式!");
            //策略模式（Strategy Pattern）是一种行为设计模式，它允许在运行时选择算法的行为。该模式通过将算法封装在独立的策略类中，使得这些算法可以相互替换，而不影响使用算法的客户端代码。

            //策略模式适用于以下场景：
            //1.当有多个相关的类，它们的行为只有细小的差别时，可以使用策略模式来避免大量的条件语句。
            //2.当需要在运行时动态选择算法时，可以使用策略模式来实现算法的灵活切换。
            //3.当一个类的行为可以通过组合不同的策略类来实现时，可以使用策略模式来实现类的复用和扩展。

            //策略模式适用于以下场景：
            //1.需要根据不同的条件或规则来执行不同的算法或行为。
            //2.需要在运行时动态地选择算法或行为。
            //3.需要将算法或行为封装成独立的可复用的组件。

            //下面是一些常见的应用场景示例：
            //1.支付方式：在电商系统中，用户可以选择不同的支付方式（如支付宝、微信支付、银行卡支付等），每种支付方式都有不同的算法来进行支付操作。
            //2.排序算法：在排序系统中，可以根据用户选择的排序规则来选择不同的排序算法，如冒泡排序、快速排序、归并排序等。
            //3.数据校验：在表单验证或数据校验的场景中，可以根据不同的校验规则选择不同的校验算法，如手机号校验、邮箱校验、身份证校验等。
            //4.日志记录：在日志记录系统中，可以根据日志级别选择不同的记录策略，如记录到文件、记录到数据库、发送邮件等。
            //在这些场景中，策略模式使得算法或行为可以独立变化，且客户端代码与具体的策略实现解耦，从而提高了代码的灵活性和可维护性。

            //下面是一个简单的示例，演示了如何使用策略模式实现支付方式的选择和支付操作：
            // 创建支付上下文对象
            PaymentContext context = new PaymentContext(new AliPayStrategy());
            // 使用支付宝支付
            decimal amount = 100m;
            context.Pay(amount);
            // 切换支付策略为微信支付
            context.SetStrategy(new WeChatPayStrategy());
            // 使用微信支付
            amount = 200m;
            context.Pay(amount);
            Console.ReadLine();
            //在上述示例中，我们定义了一个 `IPaymentStrategy` 接口作为支付策略的抽象，具体的支付策略类 `AliPayStrategy`、`WeChatPayStrategy` 和 `CardPayStrategy` 实现了该接口，并提供了各自的支付方法。`PaymentContext` 类作为上下文类，持有一个支付策略对象，并在其 `Pay` 方法中调用策略对象的支付方法。
            //通过使用策略模式，我们可以在运行时动态地选择不同的支付策略，而不需要修改客户端代码。这使得代码更加灵活，易于扩展和维护。
        }
    }
}